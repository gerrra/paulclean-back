#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
# –ê–≤—Ç–æ—Ä: AI Assistant
# –î–∞—Ç–∞: 2025-08-25

set -e

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVICE_NAME="cleaning_service_api_stable"
REDIS_NAME="cleaning_service_redis_stable"
COMPOSE_FILE="docker-compose.stable.yml"
WORK_DIR="/opt/fastapi-backend"
LOG_FILE="/var/log/cleaning_service_monitor.log"
MAX_RESTARTS=3
CHECK_INTERVAL=60

# –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è API
check_api_health() {
    local response
    response=$(curl -s -f --max-time 10 "http://localhost:8000/health" 2>/dev/null || echo "FAILED")
    
    if [[ "$response" == *"healthy"* ]]; then
        echo "HEALTHY"
    else
        echo "UNHEALTHY"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
check_container_status() {
    local container_name=$1
    local status
    
    status=$(docker inspect --format='{{.State.Status}}' "$container_name" 2>/dev/null || echo "NOT_FOUND")
    echo "$status"
}

# –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
restart_service() {
    local service=$1
    local reason=$2
    
    log "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º $service. –ü—Ä–∏—á–∏–Ω–∞: $reason"
    
    cd "$WORK_DIR" || exit 1
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–µ—Ä–≤–∏—Å
    docker-compose -f "$COMPOSE_FILE" stop "$service" 2>/dev/null || true
    
    # –ñ–¥–µ–º –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
    sleep 5
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–∏—Å
    docker-compose -f "$COMPOSE_FILE" up -d "$service"
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 10
    
    log "‚úÖ $service –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
full_restart() {
    local reason=$1
    
    log "üö® –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫. –ü—Ä–∏—á–∏–Ω–∞: $reason"
    
    cd "$WORK_DIR" || exit 1
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ
    docker-compose -f "$COMPOSE_FILE" down
    
    # –û—á–∏—â–∞–µ–º Docker
    docker system prune -f
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–Ω–æ–≤–æ
    docker-compose -f "$COMPOSE_FILE" up -d
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞
    sleep 30
    
    log "‚úÖ –ü–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω"
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏—Å–∫–æ–≤–æ–≥–æ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞
check_disk_space() {
    local usage
    usage=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    
    if [[ $usage -gt 90 ]]; then
        log "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –î–∏—Å–∫ –∑–∞–ø–æ–ª–Ω–µ–Ω –Ω–∞ ${usage}%"
        return 1
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–∞–º—è—Ç–∏
check_memory() {
    local mem_usage
    mem_usage=$(free | grep Mem | awk '{printf "%.0f", $3/$2 * 100.0}')
    
    if [[ $mem_usage -gt 90 ]]; then
        log "‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ü–∞–º—è—Ç—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –Ω–∞ ${mem_usage}%"
        return 1
    fi
    
    return 0
}

# –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
main() {
    log "üöÄ –ó–∞–ø—É—Å–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–µ—Ä–≤–∏—Å–∞ $SERVICE_NAME"
    
    local restart_count=0
    
    while true; do
        log "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤..."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –∏ –ø–∞–º—è—Ç—å
        check_disk_space
        check_memory
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å API –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        local api_status
        api_status=$(check_container_status "$SERVICE_NAME")
        
        if [[ "$api_status" == "NOT_FOUND" ]]; then
            log "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $SERVICE_NAME –Ω–µ –Ω–∞–π–¥–µ–Ω"
            restart_service "api" "container_not_found"
            ((restart_count++))
        elif [[ "$api_status" != "running" ]]; then
            log "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $SERVICE_NAME –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: $api_status)"
            restart_service "api" "container_not_running"
            ((restart_count++))
        else
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–¥–æ—Ä–æ–≤—å–µ API
            local health_status
            health_status=$(check_api_health)
            
            if [[ "$health_status" == "UNHEALTHY" ]]; then
                log "‚ùå API –Ω–µ–∑–¥–æ—Ä–æ–≤"
                restart_service "api" "api_unhealthy"
                ((restart_count++))
            else
                log "‚úÖ API —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–æ—Ä–º–∞–ª—å–Ω–æ"
                restart_count=0  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –ø—Ä–∏ —É—Å–ø–µ—Ö–µ
            fi
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º Redis
        local redis_status
        redis_status=$(check_container_status "$REDIS_NAME")
        
        if [[ "$redis_status" != "running" ]]; then
            log "‚ùå Redis –Ω–µ –∑–∞–ø—É—â–µ–Ω (—Å—Ç–∞—Ç—É—Å: $redis_status)"
            restart_service "redis" "redis_not_running"
        fi
        
        # –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤, –¥–µ–ª–∞–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
        if [[ $restart_count -ge $MAX_RESTARTS ]]; then
            log "üö® –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤ ($restart_count). –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫"
            full_restart "too_many_restarts"
            restart_count=0
        fi
        
        log "‚è≥ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ $CHECK_INTERVAL —Å–µ–∫—É–Ω–¥"
        sleep $CHECK_INTERVAL
    done
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤
trap 'log "üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥"; exit 0' SIGTERM SIGINT

# –ó–∞–ø—É—Å–∫
main "$@"
