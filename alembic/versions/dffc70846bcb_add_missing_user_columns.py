"""add_missing_user_columns

Revision ID: dffc70846bcb
Revises: 005
Create Date: 2025-09-17 02:21:25.703842

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'dffc70846bcb'
down_revision = '005'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('rate_limits',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('key', sa.String(), nullable=False),
    sa.Column('requests_count', sa.Integer(), nullable=True),
    sa.Column('window_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_rate_limits_id'), 'rate_limits', ['id'], unique=False)
    op.create_index(op.f('ix_rate_limits_key'), 'rate_limits', ['key'], unique=False)
    op.create_table('refresh_tokens',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('token', sa.String(), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('user_type', sa.String(), nullable=False),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_refresh_tokens_id'), 'refresh_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_refresh_tokens_token'), 'refresh_tokens', ['token'], unique=True)
    op.create_table('pricing_blocks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('service_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('block_type', sa.String(), nullable=False),
    sa.Column('order_index', sa.Integer(), nullable=True),
    sa.Column('is_required', sa.Boolean(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['service_id'], ['services.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_pricing_blocks_id'), 'pricing_blocks', ['id'], unique=False)
    op.create_table('toggle_options',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pricing_block_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('short_description', sa.String(), nullable=False),
    sa.Column('full_description', sa.Text(), nullable=True),
    sa.Column('percentage_increase', sa.Float(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['pricing_block_id'], ['pricing_blocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_toggle_options_id'), 'toggle_options', ['id'], unique=False)
    op.create_table('type_options',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('pricing_block_id', sa.Integer(), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('unit_price', sa.Float(), nullable=False),
    sa.Column('min_quantity', sa.Integer(), nullable=True),
    sa.Column('max_quantity', sa.Integer(), nullable=True),
    sa.Column('unit_name', sa.String(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('options', sa.Text(), nullable=False),
    sa.ForeignKeyConstraint(['pricing_block_id'], ['pricing_blocks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_type_options_id'), 'type_options', ['id'], unique=False)
    op.create_index(op.f('ix_cleaners_id'), 'cleaners', ['id'], unique=False)
    op.add_column('clients', sa.Column('hashed_password', sa.String(), nullable=True))
    op.add_column('clients', sa.Column('totp_secret', sa.String(), nullable=True))
    op.add_column('clients', sa.Column('totp_enabled', sa.Boolean(), nullable=True))
    op.add_column('clients', sa.Column('email_verified', sa.Boolean(), nullable=True))
    op.add_column('clients', sa.Column('email_verification_token', sa.String(), nullable=True))
    op.add_column('clients', sa.Column('email_verification_expires', sa.DateTime(timezone=True), nullable=True))
    op.add_column('clients', sa.Column('failed_login_attempts', sa.Integer(), nullable=True))
    op.add_column('clients', sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True))
    op.create_index(op.f('ix_clients_id'), 'clients', ['id'], unique=False)
    op.create_index(op.f('ix_order_items_id'), 'order_items', ['id'], unique=False)
    op.create_index(op.f('ix_orders_id'), 'orders', ['id'], unique=False)
    op.create_index(op.f('ix_services_id'), 'services', ['id'], unique=False)
    op.add_column('users', sa.Column('totp_secret', sa.String(), nullable=True))
    op.add_column('users', sa.Column('totp_enabled', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('email_verified', sa.Boolean(), nullable=True))
    op.add_column('users', sa.Column('email_verification_token', sa.String(), nullable=True))
    op.add_column('users', sa.Column('email_verification_expires', sa.DateTime(timezone=True), nullable=True))
    op.add_column('users', sa.Column('failed_login_attempts', sa.Integer(), nullable=True))
    op.add_column('users', sa.Column('locked_until', sa.DateTime(timezone=True), nullable=True))
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_column('users', 'locked_until')
    op.drop_column('users', 'failed_login_attempts')
    op.drop_column('users', 'email_verification_expires')
    op.drop_column('users', 'email_verification_token')
    op.drop_column('users', 'email_verified')
    op.drop_column('users', 'totp_enabled')
    op.drop_column('users', 'totp_secret')
    op.drop_index(op.f('ix_services_id'), table_name='services')
    op.drop_index(op.f('ix_orders_id'), table_name='orders')
    op.drop_index(op.f('ix_order_items_id'), table_name='order_items')
    op.drop_index(op.f('ix_clients_id'), table_name='clients')
    op.drop_column('clients', 'locked_until')
    op.drop_column('clients', 'failed_login_attempts')
    op.drop_column('clients', 'email_verification_expires')
    op.drop_column('clients', 'email_verification_token')
    op.drop_column('clients', 'email_verified')
    op.drop_column('clients', 'totp_enabled')
    op.drop_column('clients', 'totp_secret')
    op.drop_column('clients', 'hashed_password')
    op.drop_index(op.f('ix_cleaners_id'), table_name='cleaners')
    op.drop_index(op.f('ix_type_options_id'), table_name='type_options')
    op.drop_table('type_options')
    op.drop_index(op.f('ix_toggle_options_id'), table_name='toggle_options')
    op.drop_table('toggle_options')
    op.drop_index(op.f('ix_pricing_blocks_id'), table_name='pricing_blocks')
    op.drop_table('pricing_blocks')
    op.drop_index(op.f('ix_refresh_tokens_token'), table_name='refresh_tokens')
    op.drop_index(op.f('ix_refresh_tokens_id'), table_name='refresh_tokens')
    op.drop_table('refresh_tokens')
    op.drop_index(op.f('ix_rate_limits_key'), table_name='rate_limits')
    op.drop_index(op.f('ix_rate_limits_id'), table_name='rate_limits')
    op.drop_table('rate_limits')
    # ### end Alembic commands ###
