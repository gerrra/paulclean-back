#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–∏–º–µ—Ä–æ–≤ –±–ª–æ–∫–æ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
"""
import sqlite3
import json
import sys
import os
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—è–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
sys.path.append(os.path.dirname(os.path.abspath(__file__)))

def create_pricing_blocks():
    """–°–æ–∑–¥–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –±–ª–æ–∫–æ–≤ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å–ª—É–≥"""
    
    # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = sqlite3.connect('cleaning_service.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é —É—Å–ª—É–≥—É (–∏–ª–∏ —Å–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é)
    cursor.execute("SELECT id FROM services LIMIT 1")
    service_result = cursor.fetchone()
    
    if not service_result:
        print("‚ùå –ù–µ—Ç —É—Å–ª—É–≥ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ —É—Å–ª—É–≥—É —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É.")
        return
    
    service_id = service_result[0]
    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º —É—Å–ª—É–≥—É —Å ID: {service_id}")
    
    # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
    pricing_blocks = [
        {
            "name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥—É—à–µ–∫ –¥–∏–≤–∞–Ω–∞",
            "block_type": "quantity",
            "order_index": 1,
            "is_required": True,
            "quantity_options": {
                "name": "–ü–æ–¥—É—à–∫–∏ –¥–∏–≤–∞–Ω–∞",
                "unit_price": 30.0,
                "min_quantity": 1,
                "max_quantity": 10,
                "unit_name": "—à—Ç—É–∫–∞"
            }
        },
        {
            "name": "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–∫–æ–Ω",
            "block_type": "quantity", 
            "order_index": 2,
            "is_required": False,
            "quantity_options": {
                "name": "–û–∫–Ω–∞",
                "unit_price": 25.0,
                "min_quantity": 1,
                "max_quantity": 20,
                "unit_name": "—à—Ç—É–∫–∞"
            }
        },
        {
            "name": "–ë–∞–∑–æ–≤–∞—è —á–∏—Å—Ç–∫–∞",
            "block_type": "toggle",
            "order_index": 3,
            "is_required": False,
            "toggle_option": {
                "name": "–ë–∞–∑–æ–≤–∞—è —á–∏—Å—Ç–∫–∞",
                "short_description": "–ì–ª—É–±–æ–∫–∞—è —á–∏—Å—Ç–∫–∞",
                "full_description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è –≥–ª—É–±–æ–∫–æ–π —á–∏—Å—Ç–∫–∏",
                "percentage_increase": 38.0
            }
        },
        {
            "name": "–®–µ—Ä—Å—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö",
            "block_type": "toggle",
            "order_index": 4,
            "is_required": False,
            "toggle_option": {
                "name": "–®–µ—Ä—Å—Ç—å –∂–∏–≤–æ—Ç–Ω—ã—Ö",
                "short_description": "–£–¥–∞–ª–µ–Ω–∏–µ —à–µ—Ä—Å—Ç–∏",
                "full_description": "–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —à–µ—Ä—Å—Ç–∏ –∂–∏–≤–æ—Ç–Ω—ã—Ö",
                "percentage_increase": 15.0
            }
        },
        {
            "name": "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Å—É—à–∫–∞",
            "block_type": "toggle",
            "order_index": 5,
            "is_required": False,
            "toggle_option": {
                "name": "–£—Å–∫–æ—Ä–µ–Ω–Ω–∞—è —Å—É—à–∫–∞",
                "short_description": "–ë—ã—Å—Ç—Ä–∞—è —Å—É—à–∫–∞",
                "full_description": "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–π —Å—É—à–∫–∏",
                "percentage_increase": 0.0  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –Ω–∞–¥–±–∞–≤–∫–∞ $45
            }
        }
    ]
    
    for block_data in pricing_blocks:
        # –°–æ–∑–¥–∞–µ–º –±–ª–æ–∫ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        cursor.execute("""
            INSERT INTO pricing_blocks (service_id, name, block_type, order_index, is_required, is_active, created_at)
            VALUES (?, ?, ?, ?, ?, ?, ?)
        """, (
            service_id,
            block_data["name"],
            block_data["block_type"],
            block_data["order_index"],
            block_data["is_required"],
            True,
            datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        ))
        
        block_id = cursor.lastrowid
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±–ª–æ–∫: {block_data['name']} (ID: {block_id})")
        
        # –°–æ–∑–¥–∞–µ–º –æ–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –±–ª–æ–∫–∞
        if block_data["block_type"] == "quantity" and "quantity_options" in block_data:
            qo = block_data["quantity_options"]
            cursor.execute("""
                INSERT INTO quantity_options (pricing_block_id, name, unit_price, min_quantity, max_quantity, unit_name, created_at)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            """, (
                block_id,
                qo["name"],
                qo["unit_price"],
                qo["min_quantity"],
                qo["max_quantity"],
                qo["unit_name"],
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {qo['name']} - ${qo['unit_price']} –∑–∞ {qo['unit_name']}")
        
        elif block_data["block_type"] == "toggle" and "toggle_option" in block_data:
            to = block_data["toggle_option"]
            cursor.execute("""
                INSERT INTO toggle_options (pricing_block_id, name, short_description, full_description, percentage_increase, created_at)
                VALUES (?, ?, ?, ?, ?, ?)
            """, (
                block_id,
                to["name"],
                to["short_description"],
                to["full_description"],
                to["percentage_increase"],
                datetime.now().strftime('%Y-%m-%d %H:%M:%S')
            ))
            print(f"  ‚úÖ –°–æ–∑–¥–∞–Ω–∞ –æ–ø—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è: {to['name']} - {to['percentage_increase']}%")
    
    conn.commit()
    conn.close()
    
    print("\nüéâ –ë–ª–æ–∫–∏ —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    print(f"üìã –°–æ–∑–¥–∞–Ω–æ –±–ª–æ–∫–æ–≤: {len(pricing_blocks)}")
    print(f"üîó –°–≤—è–∑–∞–Ω—ã —Å —É—Å–ª—É–≥–æ–π ID: {service_id}")
    print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å API:")
    print(f"   GET /api/services/{service_id}/pricing-structure")
    print(f"   POST /api/services/{service_id}/calculate-price")

if __name__ == "__main__":
    create_pricing_blocks()
